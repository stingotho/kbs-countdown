{"ast":null,"code":"var _jsxFileName = \"/home/othman/projects/kbs-countdown/kbs-countdown/src/components/CountdownTimer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Snowflake from './Snowflake';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CountdownTimer = () => {\n  _s();\n  const [timeLeft, setTimeLeft] = useState( /* ... */);\n  const [score, setScore] = useState(0);\n  const [snowflakes, setSnowflakes] = useState([]); // State for snowflakes\n\n  // Function to calculate time left until the event\n  const calculateTimeLeft = () => {\n    const targetDate = new Date('December 14, 2023 00:00:00').getTime();\n    const now = new Date().getTime();\n    const distance = targetDate - now;\n    if (distance > 0) {\n      return {\n        days: Math.floor(distance / (1000 * 60 * 60 * 24)),\n        hours: Math.floor(distance % (1000 * 60 * 60 * 24) / (1000 * 60 * 60)),\n        minutes: Math.floor(distance % (1000 * 60 * 60) / (1000 * 60)),\n        seconds: Math.floor(distance % (1000 * 60) / 1000)\n      };\n    }\n    return {};\n  };\n  const handleSnowflakeClick = id => {\n    setScore(prevScore => prevScore + 1);\n    setSnowflakes(prevSnowflakes => prevSnowflakes.map(snowflake => snowflake.id === id ? {\n      ...snowflake,\n      isVisible: false\n    } : snowflake));\n  };\n  const createSnowflakes = num => {\n    return Array.from({\n      length: num\n    }, (_, id) => {\n      return {\n        id,\n        left: Math.random() * 100,\n        duration: 5 + Math.random() * 10,\n        delay: Math.random() * 5,\n        isVisible: true\n      };\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u2744\\uFE0FKBS Winter Break!\\u2744\\uFE0F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: Object.keys(timeLeft).length > 0 ?\n      // Display countdown timer\n      Object.entries(timeLeft).map(([unit, value]) => /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [value, \" \", unit, ' ']\n      }, unit, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 25\n      }, this)) : /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Event has started!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Click on the snowflakes to increase your score!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Score: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), snowflakes.map(snowflake => snowflake.isVisible && /*#__PURE__*/_jsxDEV(Snowflake, {\n      ...snowflake,\n      onClick: () => handleSnowflakeClick(snowflake.id)\n    }, snowflake.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 21\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n_s(CountdownTimer, \"WsOz+MnTKVrfEU4kfr94P/8Q7q0=\");\n_c = CountdownTimer;\nexport default CountdownTimer;\nvar _c;\n$RefreshReg$(_c, \"CountdownTimer\");","map":{"version":3,"names":["React","useState","useEffect","Snowflake","jsxDEV","_jsxDEV","CountdownTimer","_s","timeLeft","setTimeLeft","score","setScore","snowflakes","setSnowflakes","calculateTimeLeft","targetDate","Date","getTime","now","distance","days","Math","floor","hours","minutes","seconds","handleSnowflakeClick","id","prevScore","prevSnowflakes","map","snowflake","isVisible","createSnowflakes","num","Array","from","length","_","left","random","duration","delay","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","keys","entries","unit","value","onClick","_c","$RefreshReg$"],"sources":["/home/othman/projects/kbs-countdown/kbs-countdown/src/components/CountdownTimer.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Snowflake from './Snowflake';\n\nconst CountdownTimer = () => {\n    const [timeLeft, setTimeLeft] = useState(/* ... */);\n    const [score, setScore] = useState(0);\n    const [snowflakes, setSnowflakes] = useState([]); // State for snowflakes\n\n     // Function to calculate time left until the event\n     const calculateTimeLeft = () => {\n        const targetDate = new Date('December 14, 2023 00:00:00').getTime();\n        const now = new Date().getTime();\n        const distance = targetDate - now;\n\n        if (distance > 0) {\n            return {\n                days: Math.floor(distance / (1000 * 60 * 60 * 24)),\n                hours: Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\n                minutes: Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60)),\n                seconds: Math.floor((distance % (1000 * 60)) / 1000),\n            };\n        }\n        return {};\n    };\n    const handleSnowflakeClick = (id) => {\n        setScore(prevScore => prevScore + 1);\n        setSnowflakes(prevSnowflakes => prevSnowflakes.map(snowflake => \n            snowflake.id === id ? { ...snowflake, isVisible: false } : snowflake\n        ));\n    };\n\n    const createSnowflakes = (num) => {\n        return Array.from({ length: num }, (_, id) => {\n            return {\n                id,\n                left: Math.random() * 100,\n                duration: 5 + Math.random() * 10,\n                delay: Math.random() * 5,\n                isVisible: true\n            };\n        });\n    };\n\n    return (\n        <div>\n            <h1>❄️KBS Winter Break!❄️</h1>\n            <div>\n                {Object.keys(timeLeft).length > 0 ? (\n                    // Display countdown timer\n                    Object.entries(timeLeft).map(([unit, value]) => (\n                        <span key={unit}>\n                            {value} {unit}{' '}\n                        </span>\n                    ))\n                ) : (\n                    <span>Event has started!</span>\n                )}\n            </div>\n            <p>Click on the snowflakes to increase your score!</p>\n            <div>Score: {score}</div>\n            {snowflakes.map(snowflake => \n                snowflake.isVisible && (\n                    <Snowflake\n                        key={snowflake.id}\n                        {...snowflake}\n                        onClick={() => handleSnowflakeClick(snowflake.id)}\n                    />\n                )\n            )}\n        </div>\n    );\n};\n\nexport default CountdownTimer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}