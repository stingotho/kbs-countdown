{"ast":null,"code":"var _jsxFileName = \"/home/othman/projects/kbs-countdown/kbs-countdown/src/components/CountdownTimer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Snowflake from './Snowflake';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CountdownTimer = () => {\n  _s();\n  const [timeLeft, setTimeLeft] = useState( /* ... */);\n  const [score, setScore] = useState(0);\n  const [snowflakes, setSnowflakes] = useState([]); // State for snowflakes\n\n  useEffect(() => {\n    setSnowflakes(createSnowflakes(50));\n    const targetDate = new Date('December 14, 2023 00:00:00').getTime();\n    const interval = setInterval(() => {\n      const now = new Date().getTime();\n      const distance = targetDate - now;\n      if (distance < 0) {\n        clearInterval(interval);\n        setTimeLeft({});\n      } else {\n        setTimeLeft({\n          // Update timeLeft state based on the distance\n          // Replace with your countdown logic\n        });\n      }\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n  const handleSnowflakeClick = id => {\n    setScore(prevScore => prevScore + 1);\n    setSnowflakes(prevSnowflakes => prevSnowflakes.map(snowflake => snowflake.id === id ? {\n      ...snowflake,\n      isVisible: false\n    } : snowflake));\n  };\n  const createSnowflakes = num => {\n    return Array.from({\n      length: num\n    }, (_, id) => {\n      return {\n        id,\n        left: Math.random() * 100,\n        duration: 5 + Math.random() * 10,\n        delay: Math.random() * 5,\n        isVisible: true\n      };\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u2744\\uFE0FKBS Winter Break!\\u2744\\uFE0F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Click on the snowflakes to increase your score!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Score: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), snowflakes.map(snowflake => snowflake.isVisible && /*#__PURE__*/_jsxDEV(Snowflake, {\n      ...snowflake,\n      onClick: () => handleSnowflakeClick(snowflake.id)\n    }, snowflake.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 21\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n};\n_s(CountdownTimer, \"Q3yVq3NnIzI7IwQkXs7oB8Uc614=\");\n_c = CountdownTimer;\nexport default CountdownTimer;\nvar _c;\n$RefreshReg$(_c, \"CountdownTimer\");","map":{"version":3,"names":["React","useState","useEffect","Snowflake","jsxDEV","_jsxDEV","CountdownTimer","_s","timeLeft","setTimeLeft","score","setScore","snowflakes","setSnowflakes","createSnowflakes","targetDate","Date","getTime","interval","setInterval","now","distance","clearInterval","handleSnowflakeClick","id","prevScore","prevSnowflakes","map","snowflake","isVisible","num","Array","from","length","_","left","Math","random","duration","delay","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/othman/projects/kbs-countdown/kbs-countdown/src/components/CountdownTimer.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Snowflake from './Snowflake';\n\nconst CountdownTimer = () => {\n    const [timeLeft, setTimeLeft] = useState(/* ... */);\n    const [score, setScore] = useState(0);\n    const [snowflakes, setSnowflakes] = useState([]); // State for snowflakes\n\n    useEffect(() => {\n        setSnowflakes(createSnowflakes(50));\n        const targetDate = new Date('December 14, 2023 00:00:00').getTime();\n        const interval = setInterval(() => {\n            const now = new Date().getTime();\n            const distance = targetDate - now;\n\n            if (distance < 0) {\n                clearInterval(interval);\n                setTimeLeft({});\n            } else {\n                setTimeLeft({\n                    // Update timeLeft state based on the distance\n                    // Replace with your countdown logic\n                });\n            }\n        }, 1000);\n\n        return () => clearInterval(interval);\n    }, []);\n\n    const handleSnowflakeClick = (id) => {\n        setScore(prevScore => prevScore + 1);\n        setSnowflakes(prevSnowflakes => prevSnowflakes.map(snowflake => \n            snowflake.id === id ? { ...snowflake, isVisible: false } : snowflake\n        ));\n    };\n\n    const createSnowflakes = (num) => {\n        return Array.from({ length: num }, (_, id) => {\n            return {\n                id,\n                left: Math.random() * 100,\n                duration: 5 + Math.random() * 10,\n                delay: Math.random() * 5,\n                isVisible: true\n            };\n        });\n    };\n\n    return (\n        <div>\n            <h1>❄️KBS Winter Break!❄️</h1>\n            <p>Click on the snowflakes to increase your score!</p>\n            <div>Score: {score}</div>\n            {snowflakes.map(snowflake => \n                snowflake.isVisible && (\n                    <Snowflake\n                        key={snowflake.id}\n                        {...snowflake}\n                        onClick={() => handleSnowflakeClick(snowflake.id)}\n                    />\n                )\n            )}\n        </div>\n    );\n};\n\nexport default CountdownTimer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}